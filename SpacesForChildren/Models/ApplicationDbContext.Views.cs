//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(SpacesForChildren.Models.ApplicationDbContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets679f995904635c65e462fc6d2088870fd9f5b54b51533d96d17ccbf7d121dcb1))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySets679f995904635c65e462fc6d2088870fd9f5b54b51533d96d17ccbf7d121dcb1 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "679f995904635c65e462fc6d2088870fd9f5b54b51533d96d17ccbf7d121dcb1"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.Evaluation")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.IdentityUser")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.AspNetUsers")
            {
                return GetView2();
            }

            if (extentName == "CodeFirstDatabase.Students")
            {
                return GetView3();
            }

            if (extentName == "CodeFirstDatabase.IdentityUserClaim")
            {
                return GetView4();
            }

            if (extentName == "CodeFirstDatabase.IdentityUserLogin")
            {
                return GetView5();
            }

            if (extentName == "CodeFirstDatabase.IdentityUserRole")
            {
                return GetView6();
            }

            if (extentName == "CodeFirstDatabase.Institution")
            {
                return GetView7();
            }

            if (extentName == "CodeFirstDatabase.Service")
            {
                return GetView8();
            }

            if (extentName == "CodeFirstDatabase.IdentityRole")
            {
                return GetView9();
            }

            if (extentName == "ApplicationDbContext.Evaluations")
            {
                return GetView10();
            }

            if (extentName == "ApplicationDbContext.Service_Evaluations")
            {
                return GetView11();
            }

            if (extentName == "ApplicationDbContext.IdentityUsers")
            {
                return GetView12();
            }

            if (extentName == "ApplicationDbContext.Evaluation_IdentityUsers")
            {
                return GetView13();
            }

            if (extentName == "ApplicationDbContext.Institution_IdentityUsers")
            {
                return GetView14();
            }

            if (extentName == "ApplicationDbContext.Service_Student")
            {
                return GetView15();
            }

            if (extentName == "ApplicationDbContext.IdentityUserClaims")
            {
                return GetView16();
            }

            if (extentName == "ApplicationDbContext.IdentityUser_Claims")
            {
                return GetView17();
            }

            if (extentName == "ApplicationDbContext.IdentityUserLogins")
            {
                return GetView18();
            }

            if (extentName == "ApplicationDbContext.IdentityUser_Logins")
            {
                return GetView19();
            }

            if (extentName == "ApplicationDbContext.IdentityUserRoles")
            {
                return GetView20();
            }

            if (extentName == "ApplicationDbContext.IdentityUser_Roles")
            {
                return GetView21();
            }

            if (extentName == "ApplicationDbContext.Institutions")
            {
                return GetView22();
            }

            if (extentName == "ApplicationDbContext.Services")
            {
                return GetView23();
            }

            if (extentName == "ApplicationDbContext.Institution_Services")
            {
                return GetView24();
            }

            if (extentName == "ApplicationDbContext.Roles")
            {
                return GetView25();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Evaluation.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Evaluation
        [CodeFirstDatabaseSchema.Evaluation](T3.Evaluation_EvaluationId, T3.Evaluation_StarGrade, T3.Evaluation_Description, T3.Evaluation_RegistryDateTime, T3.[Evaluation.Service_ServiceId])
    FROM (
        SELECT T1.Evaluation_EvaluationId, T1.Evaluation_StarGrade, T1.Evaluation_Description, T1.Evaluation_RegistryDateTime, T2.[Evaluation.Service_ServiceId], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1
        FROM  (
            SELECT 
                T.EvaluationId AS Evaluation_EvaluationId, 
                T.StarGrade AS Evaluation_StarGrade, 
                T.Description AS Evaluation_Description, 
                T.RegistryDateTime AS Evaluation_RegistryDateTime, 
                True AS _from0
            FROM ApplicationDbContext.Evaluations AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Service_Evaluations_Target).EvaluationId AS Evaluation_EvaluationId, 
                Key(T.Service_Evaluations_Source).ServiceId AS [Evaluation.Service_ServiceId], 
                True AS _from1
            FROM ApplicationDbContext.Service_Evaluations AS T) AS T2
            ON T1.Evaluation_EvaluationId = T2.Evaluation_EvaluationId
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.IdentityUser.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUser
        [CodeFirstDatabaseSchema.IdentityUser](T4.IdentityUser_Id, T4.IdentityUser_Email, T4.IdentityUser_EmailConfirmed, T4.IdentityUser_PasswordHash, T4.IdentityUser_SecurityStamp, T4.IdentityUser_PhoneNumber, T4.IdentityUser_PhoneNumberConfirmed, T4.IdentityUser_TwoFactorEnabled, T4.IdentityUser_LockoutEndDateUtc, T4.IdentityUser_LockoutEnabled, T4.IdentityUser_AccessFailedCount, T4.IdentityUser_UserName, T4.[IdentityUser.Evaluation_EvaluationId], T4.[IdentityUser.Institution_InstitutionId])
    FROM (
        SELECT T1.IdentityUser_Id, T1.IdentityUser_Email, T1.IdentityUser_EmailConfirmed, T1.IdentityUser_PasswordHash, T1.IdentityUser_SecurityStamp, T1.IdentityUser_PhoneNumber, T1.IdentityUser_PhoneNumberConfirmed, T1.IdentityUser_TwoFactorEnabled, T1.IdentityUser_LockoutEndDateUtc, T1.IdentityUser_LockoutEnabled, T1.IdentityUser_AccessFailedCount, T1.IdentityUser_UserName, T2.[IdentityUser.Evaluation_EvaluationId], T3.[IdentityUser.Institution_InstitutionId], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1, (T3._from2 AND T3._from2 IS NOT NULL) AS _from2
        FROM  (
            SELECT 
                T.Id AS IdentityUser_Id, 
                T.Email AS IdentityUser_Email, 
                T.EmailConfirmed AS IdentityUser_EmailConfirmed, 
                T.PasswordHash AS IdentityUser_PasswordHash, 
                T.SecurityStamp AS IdentityUser_SecurityStamp, 
                T.PhoneNumber AS IdentityUser_PhoneNumber, 
                T.PhoneNumberConfirmed AS IdentityUser_PhoneNumberConfirmed, 
                T.TwoFactorEnabled AS IdentityUser_TwoFactorEnabled, 
                T.LockoutEndDateUtc AS IdentityUser_LockoutEndDateUtc, 
                T.LockoutEnabled AS IdentityUser_LockoutEnabled, 
                T.AccessFailedCount AS IdentityUser_AccessFailedCount, 
                T.UserName AS IdentityUser_UserName, 
                True AS _from0
            FROM ApplicationDbContext.IdentityUsers AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Evaluation_IdentityUsers_Target).Id AS IdentityUser_Id, 
                Key(T.Evaluation_IdentityUsers_Source).EvaluationId AS [IdentityUser.Evaluation_EvaluationId], 
                True AS _from1
            FROM ApplicationDbContext.Evaluation_IdentityUsers AS T) AS T2
            ON T1.IdentityUser_Id = T2.IdentityUser_Id
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Institution_IdentityUsers_Target).Id AS IdentityUser_Id, 
                Key(T.Institution_IdentityUsers_Source).InstitutionId AS [IdentityUser.Institution_InstitutionId], 
                True AS _from2
            FROM ApplicationDbContext.Institution_IdentityUsers AS T) AS T3
            ON T1.IdentityUser_Id = T3.IdentityUser_Id
    ) AS T4");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.AspNetUsers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AspNetUsers
        [CodeFirstDatabaseSchema.AspNetUsers](T1.AspNetUsers_Id, T1.AspNetUsers_BI, T1.AspNetUsers_NIF)
    FROM (
        SELECT 
            T.Id AS AspNetUsers_Id, 
            TREAT(T AS [SpacesForChildren.Models.ApplicationUser]).BI AS AspNetUsers_BI, 
            TREAT(T AS [SpacesForChildren.Models.ApplicationUser]).NIF AS AspNetUsers_NIF, 
            True AS _from0
        FROM ApplicationDbContext.IdentityUsers AS T
        WHERE (T IS OF (ONLY [SpacesForChildren.Models.ApplicationUser]) OR T IS OF (ONLY [SpacesForChildren.Models.Student]))
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Students.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Students
        [CodeFirstDatabaseSchema.Students](T3.Students_Id, T3.[Students.Service_ServiceId], T3.Students_StudentId, T3.Students_RegistryDateTime)
    FROM (
        SELECT T1.Students_Id, T2.[Students.Service_ServiceId], T1.Students_StudentId, T1.Students_RegistryDateTime, T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1
        FROM  (
            SELECT 
                T.Id AS Students_Id, 
                TREAT(T AS [SpacesForChildren.Models.Student]).StudentId AS Students_StudentId, 
                TREAT(T AS [SpacesForChildren.Models.Student]).RegistryDateTime AS Students_RegistryDateTime, 
                True AS _from0
            FROM ApplicationDbContext.IdentityUsers AS T
            WHERE T IS OF (ONLY [SpacesForChildren.Models.Student])) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Service_Student_Target).Id AS Students_Id, 
                Key(T.Service_Student_Source).ServiceId AS [Students.Service_ServiceId], 
                True AS _from1
            FROM ApplicationDbContext.Service_Student AS T) AS T2
            ON T1.Students_Id = T2.Students_Id
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.IdentityUserClaim.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserClaim
        [CodeFirstDatabaseSchema.IdentityUserClaim](T3.IdentityUserClaim_Id, T3.IdentityUserClaim_UserId, T3.IdentityUserClaim_ClaimType, T3.IdentityUserClaim_ClaimValue, T3.[IdentityUserClaim.IdentityUser_Id])
    FROM (
        SELECT T1.IdentityUserClaim_Id, T1.IdentityUserClaim_UserId, T1.IdentityUserClaim_ClaimType, T1.IdentityUserClaim_ClaimValue, T2.[IdentityUserClaim.IdentityUser_Id], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1
        FROM  (
            SELECT 
                T.Id AS IdentityUserClaim_Id, 
                T.UserId AS IdentityUserClaim_UserId, 
                T.ClaimType AS IdentityUserClaim_ClaimType, 
                T.ClaimValue AS IdentityUserClaim_ClaimValue, 
                True AS _from0
            FROM ApplicationDbContext.IdentityUserClaims AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.IdentityUser_Claims_Target).Id AS IdentityUserClaim_Id, 
                Key(T.IdentityUser_Claims_Source).Id AS [IdentityUserClaim.IdentityUser_Id], 
                True AS _from1
            FROM ApplicationDbContext.IdentityUser_Claims AS T) AS T2
            ON T1.IdentityUserClaim_Id = T2.IdentityUserClaim_Id
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.IdentityUserLogin.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserLogin
        [CodeFirstDatabaseSchema.IdentityUserLogin](T3.IdentityUserLogin_LoginProvider, T3.IdentityUserLogin_ProviderKey, T3.IdentityUserLogin_UserId, T3.[IdentityUserLogin.IdentityUser_Id])
    FROM (
        SELECT T1.IdentityUserLogin_LoginProvider, T1.IdentityUserLogin_ProviderKey, T1.IdentityUserLogin_UserId, T2.[IdentityUserLogin.IdentityUser_Id], (T2._from0 AND T2._from0 IS NOT NULL) AS _from0, T1._from1
        FROM  (
            SELECT 
                T.LoginProvider AS IdentityUserLogin_LoginProvider, 
                T.ProviderKey AS IdentityUserLogin_ProviderKey, 
                T.UserId AS IdentityUserLogin_UserId, 
                True AS _from1
            FROM ApplicationDbContext.IdentityUserLogins AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.IdentityUser_Logins_Target).LoginProvider AS IdentityUserLogin_LoginProvider, 
                Key(T.IdentityUser_Logins_Target).ProviderKey AS IdentityUserLogin_ProviderKey, 
                Key(T.IdentityUser_Logins_Target).UserId AS IdentityUserLogin_UserId, 
                Key(T.IdentityUser_Logins_Source).Id AS [IdentityUserLogin.IdentityUser_Id], 
                True AS _from0
            FROM ApplicationDbContext.IdentityUser_Logins AS T) AS T2
            ON T1.IdentityUserLogin_LoginProvider = T2.IdentityUserLogin_LoginProvider AND T1.IdentityUserLogin_ProviderKey = T2.IdentityUserLogin_ProviderKey AND T1.IdentityUserLogin_UserId = T2.IdentityUserLogin_UserId
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.IdentityUserRole.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserRole
        [CodeFirstDatabaseSchema.IdentityUserRole](T3.IdentityUserRole_UserId, T3.IdentityUserRole_RoleId, T3.[IdentityUserRole.IdentityUser_Id])
    FROM (
        SELECT T1.IdentityUserRole_UserId, T1.IdentityUserRole_RoleId, T2.[IdentityUserRole.IdentityUser_Id], (T2._from0 AND T2._from0 IS NOT NULL) AS _from0, T1._from1
        FROM  (
            SELECT 
                T.UserId AS IdentityUserRole_UserId, 
                T.RoleId AS IdentityUserRole_RoleId, 
                True AS _from1
            FROM ApplicationDbContext.IdentityUserRoles AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.IdentityUser_Roles_Target).UserId AS IdentityUserRole_UserId, 
                Key(T.IdentityUser_Roles_Target).RoleId AS IdentityUserRole_RoleId, 
                Key(T.IdentityUser_Roles_Source).Id AS [IdentityUserRole.IdentityUser_Id], 
                True AS _from0
            FROM ApplicationDbContext.IdentityUser_Roles AS T) AS T2
            ON T1.IdentityUserRole_UserId = T2.IdentityUserRole_UserId AND T1.IdentityUserRole_RoleId = T2.IdentityUserRole_RoleId
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Institution.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Institution
        [CodeFirstDatabaseSchema.Institution](T1.Institution_InstitutionId, T1.Institution_Name, T1.Institution_Location, T1.Institution_DateTime, T1.Institution_Descricao, T1.Institution_RegistryDateTime, T1.Institution_InstitutionType)
    FROM (
        SELECT 
            T.InstitutionId AS Institution_InstitutionId, 
            T.Name AS Institution_Name, 
            T.Location AS Institution_Location, 
            T.DateTime AS Institution_DateTime, 
            T.Descricao AS Institution_Descricao, 
            T.RegistryDateTime AS Institution_RegistryDateTime, 
            CAST(T.InstitutionType AS [Edm.Int32]) AS Institution_InstitutionType, 
            True AS _from0
        FROM ApplicationDbContext.Institutions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Service.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Service
        [CodeFirstDatabaseSchema.Service](T3.Service_ServiceId, T3.Service_Type, T3.Service_Description, T3.Service_AgeMinus, T3.Service_AgeMajor, T3.Service_EducationLevel, T3.Service_MonthlyPayment, T3.Service_Address, T3.Service_RegistryDateTime, T3.[Service.Institution_InstitutionId])
    FROM (
        SELECT T1.Service_ServiceId, T1.Service_Type, T1.Service_Description, T1.Service_AgeMinus, T1.Service_AgeMajor, T1.Service_EducationLevel, T1.Service_MonthlyPayment, T1.Service_Address, T1.Service_RegistryDateTime, T2.[Service.Institution_InstitutionId], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1
        FROM  (
            SELECT 
                T.ServiceId AS Service_ServiceId, 
                T.Type AS Service_Type, 
                T.Description AS Service_Description, 
                T.AgeMinus AS Service_AgeMinus, 
                T.AgeMajor AS Service_AgeMajor, 
                T.EducationLevel AS Service_EducationLevel, 
                T.MonthlyPayment AS Service_MonthlyPayment, 
                T.Address AS Service_Address, 
                T.RegistryDateTime AS Service_RegistryDateTime, 
                True AS _from0
            FROM ApplicationDbContext.Services AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Institution_Services_Target).ServiceId AS Service_ServiceId, 
                Key(T.Institution_Services_Source).InstitutionId AS [Service.Institution_InstitutionId], 
                True AS _from1
            FROM ApplicationDbContext.Institution_Services AS T) AS T2
            ON T1.Service_ServiceId = T2.Service_ServiceId
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.IdentityRole.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityRole
        [CodeFirstDatabaseSchema.IdentityRole](T1.IdentityRole_Id, T1.IdentityRole_Name)
    FROM (
        SELECT 
            T.Id AS IdentityRole_Id, 
            T.Name AS IdentityRole_Name, 
            True AS _from0
        FROM ApplicationDbContext.Roles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Evaluations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Evaluations
        [SpacesForChildren.Models.Evaluation](T1.Evaluation_EvaluationId, T1.Evaluation_StarGrade, T1.Evaluation_Description, T1.Evaluation_RegistryDateTime) WITH 
        RELATIONSHIP(CREATEREF(ApplicationDbContext.Services, ROW(T1.[Service_Evaluations.Service_Evaluations_Source.ServiceId]),[SpacesForChildren.Models.Service]),[SpacesForChildren.Models.Service_Evaluations],Service_Evaluations_Target,Service_Evaluations_Source) 
    FROM (
        SELECT 
            T.EvaluationId AS Evaluation_EvaluationId, 
            T.StarGrade AS Evaluation_StarGrade, 
            T.Description AS Evaluation_Description, 
            T.RegistryDateTime AS Evaluation_RegistryDateTime, 
            True AS _from0, 
            T.Service_ServiceId AS [Service_Evaluations.Service_Evaluations_Source.ServiceId]
        FROM CodeFirstDatabase.Evaluation AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Service_Evaluations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Service_Evaluations
        [SpacesForChildren.Models.Service_Evaluations](T3.[Service_Evaluations.Service_Evaluations_Source], T3.[Service_Evaluations.Service_Evaluations_Target])
    FROM (
        SELECT -- Constructing Service_Evaluations_Source
            CreateRef(ApplicationDbContext.Services, row(T2.[Service_Evaluations.Service_Evaluations_Source.ServiceId]), [SpacesForChildren.Models.Service]) AS [Service_Evaluations.Service_Evaluations_Source], 
            T2.[Service_Evaluations.Service_Evaluations_Target]
        FROM (
            SELECT -- Constructing Service_Evaluations_Target
                T1.[Service_Evaluations.Service_Evaluations_Source.ServiceId], 
                CreateRef(ApplicationDbContext.Evaluations, row(T1.[Service_Evaluations.Service_Evaluations_Target.EvaluationId]), [SpacesForChildren.Models.Evaluation]) AS [Service_Evaluations.Service_Evaluations_Target]
            FROM (
                SELECT 
                    T.Service_ServiceId AS [Service_Evaluations.Service_Evaluations_Source.ServiceId], 
                    T.EvaluationId AS [Service_Evaluations.Service_Evaluations_Target.EvaluationId], 
                    True AS _from0
                FROM CodeFirstDatabase.Evaluation AS T
                WHERE T.Service_ServiceId IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.IdentityUsers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUsers
        CASE
            WHEN NOT(T5._from1) THEN [SpacesForChildren.Models.IdentityUser](T5.IdentityUser_Id, T5.IdentityUser_Email, T5.IdentityUser_EmailConfirmed, T5.IdentityUser_PasswordHash, T5.IdentityUser_SecurityStamp, T5.IdentityUser_PhoneNumber, T5.IdentityUser_PhoneNumberConfirmed, T5.IdentityUser_TwoFactorEnabled, T5.IdentityUser_LockoutEndDateUtc, T5.IdentityUser_LockoutEnabled, T5.IdentityUser_AccessFailedCount, T5.IdentityUser_UserName) WITH 
                RELATIONSHIP(CREATEREF(ApplicationDbContext.Evaluations, ROW(T5.[Evaluation_IdentityUsers.Evaluation_IdentityUsers_Source.EvaluationId]),[SpacesForChildren.Models.Evaluation]),[SpacesForChildren.Models.Evaluation_IdentityUsers],Evaluation_IdentityUsers_Target,Evaluation_IdentityUsers_Source) 
                RELATIONSHIP(CREATEREF(ApplicationDbContext.Institutions, ROW(T5.[Institution_IdentityUsers.Institution_IdentityUsers_Source.InstitutionId]),[SpacesForChildren.Models.Institution]),[SpacesForChildren.Models.Institution_IdentityUsers],Institution_IdentityUsers_Target,Institution_IdentityUsers_Source) 
            WHEN (T5._from1 AND NOT(T5._from2)) THEN [SpacesForChildren.Models.ApplicationUser](T5.IdentityUser_Id, T5.IdentityUser_Email, T5.IdentityUser_EmailConfirmed, T5.IdentityUser_PasswordHash, T5.IdentityUser_SecurityStamp, T5.IdentityUser_PhoneNumber, T5.IdentityUser_PhoneNumberConfirmed, T5.IdentityUser_TwoFactorEnabled, T5.IdentityUser_LockoutEndDateUtc, T5.IdentityUser_LockoutEnabled, T5.IdentityUser_AccessFailedCount, T5.IdentityUser_UserName, T5.ApplicationUser_BI, T5.ApplicationUser_NIF) WITH 
                RELATIONSHIP(CREATEREF(ApplicationDbContext.Evaluations, ROW(T5.[Evaluation_IdentityUsers.Evaluation_IdentityUsers_Source.EvaluationId]),[SpacesForChildren.Models.Evaluation]),[SpacesForChildren.Models.Evaluation_IdentityUsers],Evaluation_IdentityUsers_Target,Evaluation_IdentityUsers_Source) 
                RELATIONSHIP(CREATEREF(ApplicationDbContext.Institutions, ROW(T5.[Institution_IdentityUsers.Institution_IdentityUsers_Source.InstitutionId]),[SpacesForChildren.Models.Institution]),[SpacesForChildren.Models.Institution_IdentityUsers],Institution_IdentityUsers_Target,Institution_IdentityUsers_Source) 
            ELSE [SpacesForChildren.Models.Student](T5.IdentityUser_Id, T5.IdentityUser_Email, T5.IdentityUser_EmailConfirmed, T5.IdentityUser_PasswordHash, T5.IdentityUser_SecurityStamp, T5.IdentityUser_PhoneNumber, T5.IdentityUser_PhoneNumberConfirmed, T5.IdentityUser_TwoFactorEnabled, T5.IdentityUser_LockoutEndDateUtc, T5.IdentityUser_LockoutEnabled, T5.IdentityUser_AccessFailedCount, T5.IdentityUser_UserName, T5.ApplicationUser_BI, T5.ApplicationUser_NIF, T5.Student_StudentId, T5.Student_RegistryDateTime) WITH 
                RELATIONSHIP(CREATEREF(ApplicationDbContext.Evaluations, ROW(T5.[Evaluation_IdentityUsers.Evaluation_IdentityUsers_Source.EvaluationId]),[SpacesForChildren.Models.Evaluation]),[SpacesForChildren.Models.Evaluation_IdentityUsers],Evaluation_IdentityUsers_Target,Evaluation_IdentityUsers_Source) 
                RELATIONSHIP(CREATEREF(ApplicationDbContext.Institutions, ROW(T5.[Institution_IdentityUsers.Institution_IdentityUsers_Source.InstitutionId]),[SpacesForChildren.Models.Institution]),[SpacesForChildren.Models.Institution_IdentityUsers],Institution_IdentityUsers_Target,Institution_IdentityUsers_Source) 
                RELATIONSHIP(CREATEREF(ApplicationDbContext.Services, ROW(T5.[Service_Student.Service_Student_Source.ServiceId]),[SpacesForChildren.Models.Service]),[SpacesForChildren.Models.Service_Student],Service_Student_Target,Service_Student_Source) 
        END
    FROM (
        SELECT T1.IdentityUser_Id, T1.IdentityUser_Email, T1.IdentityUser_EmailConfirmed, T1.IdentityUser_PasswordHash, T1.IdentityUser_SecurityStamp, T1.IdentityUser_PhoneNumber, T1.IdentityUser_PhoneNumberConfirmed, T1.IdentityUser_TwoFactorEnabled, T1.IdentityUser_LockoutEndDateUtc, T1.IdentityUser_LockoutEnabled, T1.IdentityUser_AccessFailedCount, T1.IdentityUser_UserName, T4.ApplicationUser_BI, T4.ApplicationUser_NIF, T4.Student_StudentId, T4.Student_RegistryDateTime, T1._from0, (T4._from1 AND T4._from1 IS NOT NULL) AS _from1, (T4._from2 AND T4._from2 IS NOT NULL) AS _from2, T1.[Evaluation_IdentityUsers.Evaluation_IdentityUsers_Source.EvaluationId], T1.[Institution_IdentityUsers.Institution_IdentityUsers_Source.InstitutionId], T4.[Service_Student.Service_Student_Source.ServiceId]
        FROM  (
            SELECT 
                T.Id AS IdentityUser_Id, 
                T.Email AS IdentityUser_Email, 
                T.EmailConfirmed AS IdentityUser_EmailConfirmed, 
                T.PasswordHash AS IdentityUser_PasswordHash, 
                T.SecurityStamp AS IdentityUser_SecurityStamp, 
                T.PhoneNumber AS IdentityUser_PhoneNumber, 
                T.PhoneNumberConfirmed AS IdentityUser_PhoneNumberConfirmed, 
                T.TwoFactorEnabled AS IdentityUser_TwoFactorEnabled, 
                T.LockoutEndDateUtc AS IdentityUser_LockoutEndDateUtc, 
                T.LockoutEnabled AS IdentityUser_LockoutEnabled, 
                T.AccessFailedCount AS IdentityUser_AccessFailedCount, 
                T.UserName AS IdentityUser_UserName, 
                True AS _from0, 
                T.Evaluation_EvaluationId AS [Evaluation_IdentityUsers.Evaluation_IdentityUsers_Source.EvaluationId], 
                T.Institution_InstitutionId AS [Institution_IdentityUsers.Institution_IdentityUsers_Source.InstitutionId]
            FROM CodeFirstDatabase.IdentityUser AS T) AS T1
            LEFT OUTER JOIN (
            SELECT T2.IdentityUser_Id, T2.ApplicationUser_BI, T2.ApplicationUser_NIF, T3.Student_StudentId, T3.Student_RegistryDateTime, T2._from1, (T3._from2 AND T3._from2 IS NOT NULL) AS _from2, T3.[Service_Student.Service_Student_Source.ServiceId]
            FROM  (
                SELECT 
                    T.Id AS IdentityUser_Id, 
                    T.BI AS ApplicationUser_BI, 
                    T.NIF AS ApplicationUser_NIF, 
                    True AS _from1
                FROM CodeFirstDatabase.AspNetUsers AS T) AS T2
                LEFT OUTER JOIN (
                SELECT 
                    T.Id AS IdentityUser_Id, 
                    T.StudentId AS Student_StudentId, 
                    T.RegistryDateTime AS Student_RegistryDateTime, 
                    True AS _from2, 
                    T.Service_ServiceId AS [Service_Student.Service_Student_Source.ServiceId]
                FROM CodeFirstDatabase.Students AS T) AS T3
                ON T2.IdentityUser_Id = T3.IdentityUser_Id) AS T4
            ON T1.IdentityUser_Id = T4.IdentityUser_Id
    ) AS T5");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Evaluation_IdentityUsers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Evaluation_IdentityUsers
        [SpacesForChildren.Models.Evaluation_IdentityUsers](T3.[Evaluation_IdentityUsers.Evaluation_IdentityUsers_Source], T3.[Evaluation_IdentityUsers.Evaluation_IdentityUsers_Target])
    FROM (
        SELECT -- Constructing Evaluation_IdentityUsers_Source
            CreateRef(ApplicationDbContext.Evaluations, row(T2.[Evaluation_IdentityUsers.Evaluation_IdentityUsers_Source.EvaluationId]), [SpacesForChildren.Models.Evaluation]) AS [Evaluation_IdentityUsers.Evaluation_IdentityUsers_Source], 
            T2.[Evaluation_IdentityUsers.Evaluation_IdentityUsers_Target]
        FROM (
            SELECT -- Constructing Evaluation_IdentityUsers_Target
                T1.[Evaluation_IdentityUsers.Evaluation_IdentityUsers_Source.EvaluationId], 
                CreateRef(ApplicationDbContext.IdentityUsers, row(T1.[Evaluation_IdentityUsers.Evaluation_IdentityUsers_Target.Id]), [SpacesForChildren.Models.IdentityUser]) AS [Evaluation_IdentityUsers.Evaluation_IdentityUsers_Target]
            FROM (
                SELECT 
                    T.Evaluation_EvaluationId AS [Evaluation_IdentityUsers.Evaluation_IdentityUsers_Source.EvaluationId], 
                    T.Id AS [Evaluation_IdentityUsers.Evaluation_IdentityUsers_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.IdentityUser AS T
                WHERE T.Evaluation_EvaluationId IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Institution_IdentityUsers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Institution_IdentityUsers
        [SpacesForChildren.Models.Institution_IdentityUsers](T3.[Institution_IdentityUsers.Institution_IdentityUsers_Source], T3.[Institution_IdentityUsers.Institution_IdentityUsers_Target])
    FROM (
        SELECT -- Constructing Institution_IdentityUsers_Source
            CreateRef(ApplicationDbContext.Institutions, row(T2.[Institution_IdentityUsers.Institution_IdentityUsers_Source.InstitutionId]), [SpacesForChildren.Models.Institution]) AS [Institution_IdentityUsers.Institution_IdentityUsers_Source], 
            T2.[Institution_IdentityUsers.Institution_IdentityUsers_Target]
        FROM (
            SELECT -- Constructing Institution_IdentityUsers_Target
                T1.[Institution_IdentityUsers.Institution_IdentityUsers_Source.InstitutionId], 
                CreateRef(ApplicationDbContext.IdentityUsers, row(T1.[Institution_IdentityUsers.Institution_IdentityUsers_Target.Id]), [SpacesForChildren.Models.IdentityUser]) AS [Institution_IdentityUsers.Institution_IdentityUsers_Target]
            FROM (
                SELECT 
                    T.Institution_InstitutionId AS [Institution_IdentityUsers.Institution_IdentityUsers_Source.InstitutionId], 
                    T.Id AS [Institution_IdentityUsers.Institution_IdentityUsers_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.IdentityUser AS T
                WHERE T.Institution_InstitutionId IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Service_Student.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Service_Student
        [SpacesForChildren.Models.Service_Student](T3.[Service_Student.Service_Student_Source], T3.[Service_Student.Service_Student_Target])
    FROM (
        SELECT -- Constructing Service_Student_Source
            CreateRef(ApplicationDbContext.Services, row(T2.[Service_Student.Service_Student_Source.ServiceId]), [SpacesForChildren.Models.Service]) AS [Service_Student.Service_Student_Source], 
            T2.[Service_Student.Service_Student_Target]
        FROM (
            SELECT -- Constructing Service_Student_Target
                T1.[Service_Student.Service_Student_Source.ServiceId], 
                CreateRef(ApplicationDbContext.IdentityUsers, row(T1.[Service_Student.Service_Student_Target.Id]), [SpacesForChildren.Models.Student]) AS [Service_Student.Service_Student_Target]
            FROM (
                SELECT 
                    T.Service_ServiceId AS [Service_Student.Service_Student_Source.ServiceId], 
                    T.Id AS [Service_Student.Service_Student_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.Students AS T
                WHERE T.Service_ServiceId IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.IdentityUserClaims.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserClaims
        [SpacesForChildren.Models.IdentityUserClaim](T1.IdentityUserClaim_Id, T1.IdentityUserClaim_UserId, T1.IdentityUserClaim_ClaimType, T1.IdentityUserClaim_ClaimValue) WITH 
        RELATIONSHIP(CREATEREF(ApplicationDbContext.IdentityUsers, ROW(T1.[IdentityUser_Claims.IdentityUser_Claims_Source.Id]),[SpacesForChildren.Models.IdentityUser]),[SpacesForChildren.Models.IdentityUser_Claims],IdentityUser_Claims_Target,IdentityUser_Claims_Source) 
    FROM (
        SELECT 
            T.Id AS IdentityUserClaim_Id, 
            T.UserId AS IdentityUserClaim_UserId, 
            T.ClaimType AS IdentityUserClaim_ClaimType, 
            T.ClaimValue AS IdentityUserClaim_ClaimValue, 
            True AS _from0, 
            T.IdentityUser_Id AS [IdentityUser_Claims.IdentityUser_Claims_Source.Id]
        FROM CodeFirstDatabase.IdentityUserClaim AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.IdentityUser_Claims.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUser_Claims
        [SpacesForChildren.Models.IdentityUser_Claims](T3.[IdentityUser_Claims.IdentityUser_Claims_Source], T3.[IdentityUser_Claims.IdentityUser_Claims_Target])
    FROM (
        SELECT -- Constructing IdentityUser_Claims_Source
            CreateRef(ApplicationDbContext.IdentityUsers, row(T2.[IdentityUser_Claims.IdentityUser_Claims_Source.Id]), [SpacesForChildren.Models.IdentityUser]) AS [IdentityUser_Claims.IdentityUser_Claims_Source], 
            T2.[IdentityUser_Claims.IdentityUser_Claims_Target]
        FROM (
            SELECT -- Constructing IdentityUser_Claims_Target
                T1.[IdentityUser_Claims.IdentityUser_Claims_Source.Id], 
                CreateRef(ApplicationDbContext.IdentityUserClaims, row(T1.[IdentityUser_Claims.IdentityUser_Claims_Target.Id]), [SpacesForChildren.Models.IdentityUserClaim]) AS [IdentityUser_Claims.IdentityUser_Claims_Target]
            FROM (
                SELECT 
                    T.IdentityUser_Id AS [IdentityUser_Claims.IdentityUser_Claims_Source.Id], 
                    T.Id AS [IdentityUser_Claims.IdentityUser_Claims_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.IdentityUserClaim AS T
                WHERE T.IdentityUser_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.IdentityUserLogins.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserLogins
        [SpacesForChildren.Models.IdentityUserLogin](T1.IdentityUserLogin_LoginProvider, T1.IdentityUserLogin_ProviderKey, T1.IdentityUserLogin_UserId) WITH 
        RELATIONSHIP(CREATEREF(ApplicationDbContext.IdentityUsers, ROW(T1.[IdentityUser_Logins.IdentityUser_Logins_Source.Id]),[SpacesForChildren.Models.IdentityUser]),[SpacesForChildren.Models.IdentityUser_Logins],IdentityUser_Logins_Target,IdentityUser_Logins_Source) 
    FROM (
        SELECT 
            T.LoginProvider AS IdentityUserLogin_LoginProvider, 
            T.ProviderKey AS IdentityUserLogin_ProviderKey, 
            T.UserId AS IdentityUserLogin_UserId, 
            True AS _from0, 
            T.IdentityUser_Id AS [IdentityUser_Logins.IdentityUser_Logins_Source.Id]
        FROM CodeFirstDatabase.IdentityUserLogin AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.IdentityUser_Logins.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUser_Logins
        [SpacesForChildren.Models.IdentityUser_Logins](T3.[IdentityUser_Logins.IdentityUser_Logins_Source], T3.[IdentityUser_Logins.IdentityUser_Logins_Target])
    FROM (
        SELECT -- Constructing IdentityUser_Logins_Source
            CreateRef(ApplicationDbContext.IdentityUsers, row(T2.[IdentityUser_Logins.IdentityUser_Logins_Source.Id]), [SpacesForChildren.Models.IdentityUser]) AS [IdentityUser_Logins.IdentityUser_Logins_Source], 
            T2.[IdentityUser_Logins.IdentityUser_Logins_Target]
        FROM (
            SELECT -- Constructing IdentityUser_Logins_Target
                T1.[IdentityUser_Logins.IdentityUser_Logins_Source.Id], 
                CreateRef(ApplicationDbContext.IdentityUserLogins, row(T1.[IdentityUser_Logins.IdentityUser_Logins_Target.LoginProvider], T1.[IdentityUser_Logins.IdentityUser_Logins_Target.ProviderKey], T1.[IdentityUser_Logins.IdentityUser_Logins_Target.UserId]), [SpacesForChildren.Models.IdentityUserLogin]) AS [IdentityUser_Logins.IdentityUser_Logins_Target]
            FROM (
                SELECT 
                    T.IdentityUser_Id AS [IdentityUser_Logins.IdentityUser_Logins_Source.Id], 
                    T.LoginProvider AS [IdentityUser_Logins.IdentityUser_Logins_Target.LoginProvider], 
                    T.ProviderKey AS [IdentityUser_Logins.IdentityUser_Logins_Target.ProviderKey], 
                    T.UserId AS [IdentityUser_Logins.IdentityUser_Logins_Target.UserId], 
                    True AS _from0
                FROM CodeFirstDatabase.IdentityUserLogin AS T
                WHERE T.IdentityUser_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.IdentityUserRoles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView20()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserRoles
        [SpacesForChildren.Models.IdentityUserRole](T1.IdentityUserRole_UserId, T1.IdentityUserRole_RoleId) WITH 
        RELATIONSHIP(CREATEREF(ApplicationDbContext.IdentityUsers, ROW(T1.[IdentityUser_Roles.IdentityUser_Roles_Source.Id]),[SpacesForChildren.Models.IdentityUser]),[SpacesForChildren.Models.IdentityUser_Roles],IdentityUser_Roles_Target,IdentityUser_Roles_Source) 
    FROM (
        SELECT 
            T.UserId AS IdentityUserRole_UserId, 
            T.RoleId AS IdentityUserRole_RoleId, 
            True AS _from0, 
            T.IdentityUser_Id AS [IdentityUser_Roles.IdentityUser_Roles_Source.Id]
        FROM CodeFirstDatabase.IdentityUserRole AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.IdentityUser_Roles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView21()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUser_Roles
        [SpacesForChildren.Models.IdentityUser_Roles](T3.[IdentityUser_Roles.IdentityUser_Roles_Source], T3.[IdentityUser_Roles.IdentityUser_Roles_Target])
    FROM (
        SELECT -- Constructing IdentityUser_Roles_Source
            CreateRef(ApplicationDbContext.IdentityUsers, row(T2.[IdentityUser_Roles.IdentityUser_Roles_Source.Id]), [SpacesForChildren.Models.IdentityUser]) AS [IdentityUser_Roles.IdentityUser_Roles_Source], 
            T2.[IdentityUser_Roles.IdentityUser_Roles_Target]
        FROM (
            SELECT -- Constructing IdentityUser_Roles_Target
                T1.[IdentityUser_Roles.IdentityUser_Roles_Source.Id], 
                CreateRef(ApplicationDbContext.IdentityUserRoles, row(T1.[IdentityUser_Roles.IdentityUser_Roles_Target.UserId], T1.[IdentityUser_Roles.IdentityUser_Roles_Target.RoleId]), [SpacesForChildren.Models.IdentityUserRole]) AS [IdentityUser_Roles.IdentityUser_Roles_Target]
            FROM (
                SELECT 
                    T.IdentityUser_Id AS [IdentityUser_Roles.IdentityUser_Roles_Source.Id], 
                    T.UserId AS [IdentityUser_Roles.IdentityUser_Roles_Target.UserId], 
                    T.RoleId AS [IdentityUser_Roles.IdentityUser_Roles_Target.RoleId], 
                    True AS _from0
                FROM CodeFirstDatabase.IdentityUserRole AS T
                WHERE T.IdentityUser_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Institutions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView22()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Institutions
        [SpacesForChildren.Models.Institution](T1.Institution_InstitutionId, T1.Institution_Name, T1.Institution_Location, T1.Institution_DateTime, T1.Institution_Descricao, T1.Institution_RegistryDateTime, T1.Institution_InstitutionType)
    FROM (
        SELECT 
            T.InstitutionId AS Institution_InstitutionId, 
            T.Name AS Institution_Name, 
            T.Location AS Institution_Location, 
            T.DateTime AS Institution_DateTime, 
            T.Descricao AS Institution_Descricao, 
            T.RegistryDateTime AS Institution_RegistryDateTime, 
            CAST(T.InstitutionType AS [SpacesForChildren.Models.InstitutionType]) AS Institution_InstitutionType, 
            True AS _from0
        FROM CodeFirstDatabase.Institution AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Services.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView23()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Services
        [SpacesForChildren.Models.Service](T1.Service_ServiceId, T1.Service_Type, T1.Service_Description, T1.Service_AgeMinus, T1.Service_AgeMajor, T1.Service_EducationLevel, T1.Service_MonthlyPayment, T1.Service_Address, T1.Service_RegistryDateTime) WITH 
        RELATIONSHIP(CREATEREF(ApplicationDbContext.Institutions, ROW(T1.[Institution_Services.Institution_Services_Source.InstitutionId]),[SpacesForChildren.Models.Institution]),[SpacesForChildren.Models.Institution_Services],Institution_Services_Target,Institution_Services_Source) 
    FROM (
        SELECT 
            T.ServiceId AS Service_ServiceId, 
            T.Type AS Service_Type, 
            T.Description AS Service_Description, 
            T.AgeMinus AS Service_AgeMinus, 
            T.AgeMajor AS Service_AgeMajor, 
            T.EducationLevel AS Service_EducationLevel, 
            T.MonthlyPayment AS Service_MonthlyPayment, 
            T.Address AS Service_Address, 
            T.RegistryDateTime AS Service_RegistryDateTime, 
            True AS _from0, 
            T.Institution_InstitutionId AS [Institution_Services.Institution_Services_Source.InstitutionId]
        FROM CodeFirstDatabase.Service AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Institution_Services.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView24()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Institution_Services
        [SpacesForChildren.Models.Institution_Services](T3.[Institution_Services.Institution_Services_Source], T3.[Institution_Services.Institution_Services_Target])
    FROM (
        SELECT -- Constructing Institution_Services_Source
            CreateRef(ApplicationDbContext.Institutions, row(T2.[Institution_Services.Institution_Services_Source.InstitutionId]), [SpacesForChildren.Models.Institution]) AS [Institution_Services.Institution_Services_Source], 
            T2.[Institution_Services.Institution_Services_Target]
        FROM (
            SELECT -- Constructing Institution_Services_Target
                T1.[Institution_Services.Institution_Services_Source.InstitutionId], 
                CreateRef(ApplicationDbContext.Services, row(T1.[Institution_Services.Institution_Services_Target.ServiceId]), [SpacesForChildren.Models.Service]) AS [Institution_Services.Institution_Services_Target]
            FROM (
                SELECT 
                    T.Institution_InstitutionId AS [Institution_Services.Institution_Services_Source.InstitutionId], 
                    T.ServiceId AS [Institution_Services.Institution_Services_Target.ServiceId], 
                    True AS _from0
                FROM CodeFirstDatabase.Service AS T
                WHERE T.Institution_InstitutionId IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Roles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView25()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Roles
        [SpacesForChildren.Models.IdentityRole](T1.IdentityRole_Id, T1.IdentityRole_Name)
    FROM (
        SELECT 
            T.Id AS IdentityRole_Id, 
            T.Name AS IdentityRole_Name, 
            True AS _from0
        FROM CodeFirstDatabase.IdentityRole AS T
    ) AS T1");
        }
    }
}
